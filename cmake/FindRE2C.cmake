#.rst:
# FindRE2C
# --------
#
# Find ``re2c`` executable and provide a macro to generate custom build rules.
#
# The module defines the following variables:
#
# ``RE2C_EXECUTABLE``
#   path to the ``re2c`` program
#
# ``RE2C_VERSION``
#   version of ``re2c``
#
# ``RE2C_FOUND``
#   true if the program was found
#
# The minimum required version of ``re2c`` can be specified using the
# standard CMake syntax, e.g. ``find_package(RE2C 0.9.4)``.
#
# If ``re2c`` is found, the module defines the macro::
#
#   RE2C_TARGET(<Name> <Re2cInput> <CodeOutput>
#               [COMPILE_FLAGS <flags>]
#               [DEFINES_FILE <file>]
#               )
#
# which will create a custom rule to generate a scanner. ``<Re2cInput>`` is
# the path to a re2c file. ``<CodeOutput>`` is the name of the source file
# generated by re2c. A header file could also be generated, and contains
# the enum with condition names.
#
# The options are:
#
# ``COMPILE_FLAGS <flags>``
#   Specify flags to be added to the ``re2c`` command line.
#
# ``DEFINES_FILE <file>``
#   Specify a non-default header ``<file>`` to be generated by ``re2c``.
#
# The macro defines the following variables:
#
# ``RE2C_<Name>_DEFINED``
#   true if the macro ran successfully
#
# ``RE2C_<Name>_INPUT``
#   The input source file, an alias for <Re2cInput>
#
# ``RE2C_<Name>_OUTPUT_SOURCE``
#   The source file generated by re2c
#
# ``RE2C_<Name>_OUTPUT_HEADER``
#   The header file generated by re2c
#
# ``RE2C_<Name>_OUTPUTS``
#   The source files generated by re2c
#
# ``RE2C_<Name>_COMPILE_FLAGS``
#   Options used in the ``re2c`` command line
#
# Example usage:
#
# .. code-block:: cmake
#
#   find_package(RE2C)
#   RE2C_TARGET(MyScanner scanner.l ${CMAKE_CURRENT_BINARY_DIR}/scanner.cpp
#     DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/scanner.h)
#   add_executable(Foo main.cpp ${RE2C_MyScanner_OUTPUTS})

find_program(RE2C_EXECUTABLE NAMES re2c DOC "Path to re2c executable")

mark_as_advanced(RE2C_EXECUTABLE)

include(CMakeParseArguments)

if(RE2C_EXECUTABLE)
  execute_process(
    COMMAND ${RE2C_EXECUTABLE} --version
    OUTPUT_VARIABLE RE2C_version_output
    ERROR_VARIABLE RE2C_version_error
    RESULT_VARIABLE RE2C_version_result
    OUTPUT_STRIP_TRAILING_WHITESPACE
    )

  # execute ``re2c --version`` returns 2 on Windows
  if(0 AND NOT ${RE2C_version_result} EQUAL 0)
    message(SEND_ERROR "Command \"${RE2C_EXECUTABLE} --version\" failed with output:\n${RE2C_version_error}")
  else()
    if("${RE2C_version_output}" MATCHES "^re2c ([^\n]+)")
      set(RE2C_VERSION "${CMAKE_MATCH_1}")
    endif()
  endif()

  # internal macro
  macro(RE2C_TARGET_option_extraopts Options)
    set(RE2C_TARGET_extraopts "${Options}")
    separate_arguments(RE2C_TARGET_extraopts)
    list(APPEND RE2C_TARGET_cmdopt ${RE2C_TARGET_extraopts})
  endmacro()

  # internal macro
  macro(RE2C_TARGET_option_defines Header)
    set(RE2C_TARGET_output_header "${Header}")
    list(APPEND RE2C_TARGET_cmdopt -t ${RE2C_TARGET_output_header})
  endmacro()
  
  #============================================================
  # RE2C_TARGET (public macro)
  #============================================================
  #
  macro(RE2C_TARGET Name Re2cInput Re2cOutput)
    set(RE2C_TARGET_output_header "")
    set(RE2C_TARGET_cmdopt "")
    set(RE2C_TARGET_outputs "${Re2cOutput}")

    # Parsing parameters
    set(RE2C_TARGET_PARAM_OPTIONS)
    set(RE2C_TARGET_PARAM_ONE_VALUE_KEYWORDS COMPILE_FLAGS DEFINES_FILE)
    set(RE2C_TARGET_PARAM_MULTI_VALUE_KEYWORDS)
    cmake_parse_arguments(
      RE2C_TARGET_ARG
      "${RE2C_TARGET_PARAM_OPTIONS}"
      "${RE2C_TARGET_PARAM_ONE_VALUE_KEYWORDS}"
      "${RE2C_TARGET_PARAM_MULTI_VALUE_KEYWORDS}"
      ${ARGN}
      )

    if(NOT "${RE2C_TARGET_ARG_UNPARSED_ARGUMENTS}" STREQUAL "")
      message(SEND_ERROR "Usage")
    else()
      if(NOT "${RE2C_TARGET_ARG_COMPILE_FLAGS}" STREQUAL "")
        RE2C_TARGET_option_extraopts("${RE2C_TARGET_ARG_COMPILE_FLAGS}")
      endif()
      if(NOT "${RE2C_TARGET_ARG_DEFINES_FILE}" STREQUAL "")
        RE2C_TARGET_option_defines("${RE2C_TARGET_ARG_DEFINES_FILE}")
      endif()

      list(APPEND RE2C_TARGET_outputs "${RE2C_TARGET_output_header}")

      add_custom_command(
        OUTPUT ${RE2C_TARGET_outputs}
        COMMAND ${RE2C_EXECUTABLE} ${RE2C_TARGET_cmdopt} -o ${Re2cOutput} ${Re2cInput}
        VERBATIM
        DEPENDS ${Re2cInput}
        COMMENT "[RE2C][${Name}] Building scanner with re2c ${RE2C_VERSION}"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        )

      # define target variables
      set(RE2C_${Name}_DEFINED TRUE)
      set(RE2C_${Name}_INPUT ${Re2cInput})
      set(RE2C_${Name}_OUTPUT_SOURCE ${Re2cOutput})
      set(RE2C_${Name}_OUTPUT_HEADER ${RE2C_TARGET_output_header})
      set(RE2C_${Name}_OUTPUTS ${RE2C_TARGET_outputs})
      set(RE2C_${Name}_COMPILE_FLAGS ${RE2C_TARGET_cmdopt})
    endif()
  endmacro()
  #
  #============================================================

endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(RE2C REQUIRED_VARS RE2C_EXECUTABLE VERSION_VAR RE2C_VERSION)

# FindRE2C.cmake ends here
